/*
 * Copyright 2018 Blockchain Innovation Foundation <https://blockchain-innovation.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Apply the java-library plugin to add support for Java Library
//apply plugin: 'idea'
import org.asciidoctor.gradle.AsciidoctorTask

plugins {
    id 'org.asciidoctor.convert' version '1.5.6' apply false
    id 'org.springframework.boot' version '2.0.5.RELEASE' apply false
}


// In this section you declare where to find the dependencies of your project
allprojects {
    repositories {
        jcenter()
    }
    version = '0.2.1'
    group = 'org.blockchain_innovation.factom'


}

subprojects {
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
}



subprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'pmd'

    buildscript {
        repositories {
            jcenter()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
    }

    tasks.withType(Pmd){
        ignoreFailures = false
        consoleOutput = true
        reports{
            xml.enabled=true
            html.enabled=true
            html.destination file("${project.projectDir}/../quality/reports/${project.name}-pmd.html")
        }
    }
    tasks.withType(FindBugs) {
        ignoreFailures = true
        reports {
            xml.enabled = false
            html.enabled = true
            html.destination file("${project.projectDir}/../quality/reports/${project.name}-findbugs.html")
        }
    }
    tasks.withType(Checkstyle) {
        ignoreFailures = true
        configFile = file("${project.projectDir}/../quality/config/checkstyle.xml")
        reports {
            xml.enabled false
            html.enabled true
            html.destination file("${project.projectDir}/../quality/reports/${project.name}-checkstyle.html")
        }
    }
    task qualityCheck {
        dependsOn tasks.withType(Pmd)
        dependsOn tasks.withType(FindBugs)
        dependsOn tasks.withType(Checkstyle)
    }
}

task cleanReports(type: Delete) {
    doLast {
        FileTree tree = fileTree(dir: "${project.projectDir}/quality/reports");
        tree.include "*.html"
        tree.each { File file ->
            delete(file)
        }
        println "clean reports: ${project.projectDir}/quality/reports"
    }
    // clean.dependsOn cleanReports
}

project(':factom-client-api') {
    apply plugin: 'java'
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    dependencies {
        compileOnly 'javax.enterprise:cdi-api:2.0.SP1'
//        api 'org.slf4j:slf4j-api:1.7.25'
    }
}


project(':factom-client-impl') {
    apply plugin: 'java'
    dependencies {
        compile project(':factom-client-api')
        compile 'org.slf4j:slf4j-api:1.7.25'
        compileOnly 'javax.enterprise:cdi-api:2.0.SP1'

        testCompile 'org.mock-server:mockserver-netty:5.4.1'
        testCompile 'org.mock-server:mockserver-client-java:5.4.1'
        testCompile 'junit:junit:4.12'

    }
}

project(':factom-client-offline-signing') {
    apply plugin: 'java'
    dependencies {
        compile project(':factom-client-api')
        compile project(':factom-client-impl')
        compile 'org.slf4j:slf4j-api:1.7.25'
        compile 'net.i2p.crypto:eddsa:0.3.0'

        testCompile 'org.mock-server:mockserver-netty:5.4.1'
        testCompile 'org.mock-server:mockserver-client-java:5.4.1'
        testCompile 'junit:junit:4.12'
    }
}

project(':json-converter-gson') {
    apply plugin: 'java'

    dependencies {
        compile project(':factom-client-api')
        compile 'com.google.code.gson:gson:2.8.5'
        compileOnly 'javax.enterprise:cdi-api:2.0.SP1'
        testCompile 'junit:junit:4.12'
        testCompile project(':factom-client-impl')
    }
}

project(':json-converter-jee') {
    apply plugin: 'java'

    dependencies {
        compile project(':factom-client-api')
        compile 'javax.json:javax.json-api:1.1.2'
        compile 'javax.json.bind:javax.json.bind-api:1.0.0-RC2'
        compileOnly 'javax.enterprise:cdi-api:2.0.SP1'
        testCompile 'org.glassfish:javax.json:1.1.2'
        testCompile 'org.eclipse:yasson:1.0.1'
        testCompile 'junit:junit:4.12'
        testCompile project(':factom-client-impl')
    }
}

project(':jee-support') {
    apply plugin: 'java'

    dependencies {
        compile project(':factom-client-impl')
//        compile project(':json-converter-jee')
        compile project(':json-converter-gson') //fixme
        compileOnly 'javax:javaee-api:7.0'
        testCompile 'org.jboss.arquillian.container:arquillian-glassfish-embedded-3.1:1.0.2'
        testCompile 'org.glassfish.main.extras:glassfish-embedded-all:5.0'
        testCompile 'org.jboss.arquillian.junit:arquillian-junit-container:1.4.0.Final'
        compile 'com.google.code.gson:gson:2.8.5' //fixme
        testCompile 'junit:junit:4.12'
    }
}

project(':spring-support') {

    repositories {
        jcenter()
    }
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        compile project(':factom-client-impl')
        testCompile project(':json-converter-gson')
        testCompile 'com.google.code.gson:gson:2.8.5'
        testCompile 'junit:junit:4.12'
        testCompile 'javax.enterprise:cdi-api:2.0.SP1'
        compile('org.springframework.boot:spring-boot-starter')
        testCompile('org.springframework.boot:spring-boot-starter-test')

    }



}

project(':factom-client-tests') {
    apply plugin: 'java'
    dependencies {
        testCompile project(':factom-client-impl')
        compile project(':factom-client-offline-signing')
        testCompile project(':json-converter-gson')
        testCompile project(':json-converter-jee')
        testCompile 'org.mock-server:mockserver-netty:5.4.1'
        testCompile 'org.mock-server:mockserver-client-java:5.4.1'
        testCompile 'org.glassfish:javax.json:1.1.2'
        testCompile 'org.eclipse:yasson:1.0.1'
        testCompile 'junit:junit:4.12'

    }
}

project(':docs') {

    def exportedProjects = [
            ":factom-client-api",
            ":factom-client-impl",
            ":factom-client-offline-signing",
            ":json-converter-gson",
            ":json-converter-jee",
            ":jee-support"
    ]


    buildscript {
        repositories {
            jcenter()
        }

        dependencies {
            classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.6'
            classpath 'org.asciidoctor:asciidoctorj-epub3:1.5.0-alpha.6'
            classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.15'
        }
    }
    apply plugin: 'java'
    apply plugin: 'org.asciidoctor.convert'


    tasks.withType(AsciidoctorTask) { task ->

        sources {
            include 'README.adoc'
        }
        attributes 'sourcedir': project.sourceSets.main.java.srcDirs[0],
                'source-highlighter': 'coderay',
                experimental: true,
                toc: 'right',
                idprefix: '',
                idseparator: '-'
    }

    task html5(type: AsciidoctorTask, description: 'Generates single page HTML') {
        backends 'html5'
    }

    task pdf(type: AsciidoctorTask, description: 'Generates PDF') {
        backends 'pdf'
    }

    task epub3(type: AsciidoctorTask, description: 'Generates EPUB3') {
        backends 'epub3'
    }

    task javadocs(type: Javadoc) {
        source exportedProjects.collect { project(it).sourceSets.main.allJava }
        classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
        destinationDir = file("${buildDir}/docs/javadoc")
        options.encoding = "UTF-8"

    }

    defaultTasks 'html5', 'javadocs'
}
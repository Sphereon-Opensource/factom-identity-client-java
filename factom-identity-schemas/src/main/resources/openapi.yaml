openapi: 3.0.1
info:
  title: Factom DIDs
  description: Decentralized Identifiers (DID) on Factom, provides models, APIs, clients and universal resolver integrations for DIDs on top of Factom.
  contact:
    name: Sphereon B.V.
    email: dev@sphereon.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 0.3.0
servers:
  - url: http://localhost:8080
tags:
  - name: FactomDID
    description: Factom DID API endpoints to create, update and deactivate Factom DIDs
    externalDocs:
      description: Factom DID specification
      url: 'https://github.com/bi-foundation/FIS/blob/feature/DID/FIS/DID.md'
  - name: UniversalResolver
    description: Universal resolver compatible endpoints
    externalDocs:
      description: Universal resolver github
      url: 'https://github.com/decentralized-identity/universal-resolver/'
paths:
  /factom/identity/dids:
    post:
      tags:
        - FactomDID
      summary: Create a new DID
      operationId: createFactomDid
      requestBody:
        description: Create a new Factom DID chain
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FactomDidContent'
        required: true
      responses:
        '405':
          description: Validation exception
          content: {}
      security:
        - {}
        - ApiKeyAuth: []
        - BearerAuth: []
        - OAuth2:
            - read
            - write
      x-codegen-request-body-name: body
  '/factom/identity/dids/{did}':
    get:
      tags:
        - FactomDID
      summary: Find DID
      description: Returns the Factom DID content
      operationId: getFactomDid
      parameters:
        - name: did
          in: path
          description: DID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FactomDidContent'
        '400':
          description: Invalid DID suplied
          content: {}
        '404':
          description: DID not found
          content: {}
      security:
        - {}
        - ApiKeyAuth: []
        - BearerAuth: []
        - OAuth2:
            - read
            - write
    post:
      tags:
        - FactomDID
      summary: Updates a DID
      operationId: updateFactomDid
      parameters:
        - name: did
          in: path
          description: DID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequest'
        required: true
      responses:
        '405':
          description: Invalid input
          content: {}
      security:
        - {}
        - ApiKeyAuth: []
        - BearerAuth: []
        - OAuth2:
            - write
    delete:
      tags:
        - FactomDID
      summary: Deactivate a DID
      operationId: deactivateFactomDid
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - name: did
          in: path
          description: DID to deactivate
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid DID supplied
          content: {}
        '404':
          description: DID not found
          content: {}
      security:
        - {}
        - ApiKeyAuth: []
        - BearerAuth: []
        - OAuth2:
            - write

  /identifiers/{identifier}:
    get:
      summary: Resolve a DID or other identifier (universal resolver).
      operationId: resolve
      tags:
        - UniversalResolver
      parameters:
        - in: path
          required: true
          name: identifier
          schema:
            type: string
          description: A DID or other identifier to be resolved.
        - in: header
          required: false
          name: Accept
          schema:
            type: string
          example: application/did+ld+json
      responses:
        '200':
          description: successfully resolved!
          content:
            application/json:
              schema:
                type: object
                description: The Resolution Result or DID document.
        '400':
          description: invalid input!
        '500':
          description: error!
      security:
        - {}
        - ApiKeyAuth: []
        - BearerAuth: []
        - OAuth2:
            - read
            - write
components:
  schemas:
    Key:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          pattern: '^did:factom:$'
          minLength: 43
        type:
          $ref: '#/components/schemas/KeyType'
        controller:
          type: string
          minLength: 43
        publicKeyBase58:
          type: string
        priorityRequirement:
          type: integer
          minimum: 0
        bip44:
          type: string
      example:
        id: "did:factom:e21f9aef1ed841a7d7d634c9dd0dc204c694b51ad7152a44c326113326283eeb#my-key"
        controller: "did:factom:e21f9aef1ed841a7d7d634c9dd0dc204c694b51ad7152a44c326113326283eeb"
        publicKeyBase58: "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
        type: "Ed25519VerificationKey"
        priorityRequirement: 0
    ManagementKey:
      allOf:
        - $ref: '#/components/schemas/Key'
        - type: object
          properties:
            priority:
              type: integer
              minimum: 0
      example:
        id: "did:factom:e21f9aef1ed841a7d7d634c9dd0dc204c694b51ad7152a44c326113326283eeb#management-key"
        priority: 0
    DidKey:
      allOf:
        - $ref: '#/components/schemas/Key'
        - type: object
          properties:
            purpose:
              type: array
              items:
                $ref: '#/components/schemas/KeyPurpose'
      example:
        purpose:
          - "publicKey"
          - "authentication"
    Service:
      type: object
      additionalProperties: true
      required:
        - id
        - type
      properties:
        id:
          type: string
        type:
          type: string
        serviceEndpoint:
          type: string
        priorityRequirement:
          type: integer
          minimum: 0
      example:
        id: "did:factom:e21f9aef1ed841a7d7d634c9dd0dc204c694b51ad7152a44c326113326283eeb#example-service"
        type: "CredentialRepositoryService"
        serviceEndpoint: "https://repository.example.com/service/8377464"
        priorityRequirement: 0

    KeyType:
      type: string
      enum:
        - Ed25519VerificationKey
        - ECDSASecp256k1VerificationKey
        - RSAVerificationKey
    KeyPurpose:
      type: string
      enum:
        - publicKey
        - authentication
    IdLookup:
      type: object
      required:
        - id
      properties:
        id:
          type: string
      example:
        id: "did:factom:e21f9aef1ed841a7d7d634c9dd0dc204c694b51ad7152a44c326113326283eeb#example-key"
    IdPurposeLookup:
      allOf:
        - $ref: '#/components/schemas/IdLookup'
        - type: object
          properties:
            purpose:
              type: array
              items:
                $ref: '#/components/schemas/KeyPurpose'
      example:
        - id: "did:factom:e21f9aef1ed841a7d7d634c9dd0dc204c694b51ad7152a44c326113326283eeb#example-key3"
          purpose:
            - "publicKey"
            - "authentication"
    FactomDidContent:
      allOf:
        - type: object
          properties:
            didMethodVersion:
              $ref: '#/components/schemas/DidMethodVersion'
        - $ref: '#/components/schemas/KeyedObjects'
    UpdateRequest:
      type: object
      properties:
        revoke:
          $ref: '#/components/schemas/RevokeLookups'
        add:
          $ref: '#/components/schemas/KeyedObjects'
    KeyedObjects:
      type: object
      properties:
        managementKey:
          type: array
          items:
            $ref: '#/components/schemas/ManagementKey'
        didKey:
          type: array
          items:
            $ref: '#/components/schemas/DidKey'
        service:
          type: array
          items:
            $ref: '#/components/schemas/Service'
    RevokeLookups:
      type: object
      properties:
        managementKey:
          type: array
          items:
            $ref: '#/components/schemas/IdLookup'
        didKey:
          type: array
          items:
            $ref: '#/components/schemas/IdPurposeLookup'
        service:
          type: array
          items:
            $ref: '#/components/schemas/IdLookup'
      example:
        managementKey:
          - id: "did:factom:e21f9aef1ed841a7d7d634c9dd0dc204c694b51ad7152a44c326113326283eeb#long-example-1"
          - id: "#shorthand-example-2"
        didKey:
          - id: "did:factom:e21f9aef1ed841a7d7d634c9dd0dc204c694b51ad7152a44c326113326283eeb#example-did-1"
            purpose:
              - "publicKey"
          - id: "did:factom:e21f9aef1ed841a7d7d634c9dd0dc204c694b51ad7152a44c326113326283eeb#example-2"
            purpose:
              - "authentication"
              - "publicKey"
        service:
          - id: "did:factom:e21f9aef1ed841a7d7d634c9dd0dc204c694b51ad7152a44c326113326283eeb#example-service"
    DidMethodVersion:
      type: string
      enum:
        - "0.2.0"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    OAuth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://example/oauth/dialog'
          scopes:
            write: modify dids
            read: read dids
    ApiKeyAuth:
      type: apiKey
      name: X-API-Key
      in: header

